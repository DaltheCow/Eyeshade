!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=81)}({49:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getStorageAll=t.setStorage=t.getStorage=void 0;t.getStorage=(e,t)=>{const n="settings"===e?chrome.storage.sync:chrome.storage.local;let r=new Promise(t=>{n.get(e,e=>t(e))});return t?r.then(t):r};t.setStorage=(e,t,n)=>{const r="settings"===e?chrome.storage.sync:chrome.storage.local;let o=new Promise(n=>{r.set(t,()=>{r.get(e,e=>n(e))})});return n?o.then(n):o};t.getStorageAll=(e,t)=>{const n=e.map(e=>({key:e,storage:chrome.storage["settings"===e?"sync":"local"]}));let r=Promise.all(n.map(e=>{const{storage:t,key:n}=e;return new Promise(e=>{t.get(n,t=>e(t))})})).then(t=>{const n={};return t.forEach((t,r)=>n[e[r]]=t[e[r]]),n});return t?r.then(t):r}},81:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RedirectEnum=void 0;const r=n(49);var o;!function(e){e.URL="URL",e.BLANK="BLANK",e.ENCOURAGING="ENCOURAGING",e.OFFENSIVE="OFFENSIVE",e.CUSTOM="CUSTOM"}(o=t.RedirectEnum||(t.RedirectEnum={})),(0,r.getStorageAll)(["settings"]).then(e=>{!function(e,t){let n=e.settings||{},{isBlocking:i,siteList:s,isWhiteListing:c,whiteListSites:u,redirectLink:a,redirectOption:l}=n;i=Boolean(i),c=Boolean(c),s=void 0===s?[]:s,u=void 0===u?[]:u,a=a||"",l=l||o.BLANK;const g={isBlocking:i,siteList:s,isWhiteListing:c,whiteListSites:u,redirectLink:a,redirectOption:l};let d={};(0,r.setStorage)("settings",{settings:g}).then(e=>{d=Object.assign(d,e),t(d)})}(e,e=>{const{isBlocking:t,isWhiteListing:n,siteList:r,whiteListSites:o,redirectLink:i,redirectOption:s}=e.settings})}),chrome.tabs.onUpdated.addListener((function(e,t){})),chrome.storage.onChanged.addListener((function(e,t){}))}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,